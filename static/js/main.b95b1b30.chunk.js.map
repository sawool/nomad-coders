{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","alt","poster","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_getMovies","asyncToGenerator","regenerator_default","mark","_callee","movies","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","state","movie","src_Movie","medium_cover_image","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiCA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,IAAKC,EAAUF,EAAVE,OAC1B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQD,IAAKA,EAAKM,MAAON,EAAKO,UAAU,kBAG3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAmB1BC,MAnDf,SAAAC,GAAoD,IAAnCN,EAAmCM,EAAnCN,MAAOL,EAA4BW,EAA5BX,OAAQY,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaG,OAAQA,EAAQD,IAAKM,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAEVd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAGnCd,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEI,UAAU,kBACVY,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eCkCHC,cApDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,WAVmBN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAhC,EAAAiC,KAUN,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAhC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUhB,EAAKiB,WADf,OACLL,EADKE,EAAAI,KAEXlB,EAAKmB,SAAS,CACZP,WAHS,wBAAAE,EAAAM,SAAAT,MAVMX,EAiBnBiB,SAAW,WACT,OAAOI,MACL,iEAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,SACvBc,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAvBX3B,EA0BnB8B,cAAgB,WAEd,OADmB9B,EAAK+B,MAAhBnB,OACMvB,IAAI,SAAA2C,GAEhB,OADAJ,QAAQC,IAAIG,GAEVxD,EAAAC,EAAAC,cAACuD,EAAD,CACErD,MAAOoD,EAAMpD,MACbL,OAAQyD,EAAME,mBACd3C,IAAKyC,EAAMG,GACXhD,OAAQ6C,EAAM7C,OACdC,SAAU4C,EAAM5C,cAlCtBY,EAAK+B,MAAQ,GAFI/B,mFAMjBG,KAAKI,8CAoCE,IACCK,EAAWT,KAAK4B,MAAhBnB,OACR,OACEpC,EAAAC,EAAAC,cAAA,OAAKG,UAAW+B,EAAS,MAAQ,gBAC9BA,EAAST,KAAK2B,gBAAkB,kBAjDvBM,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.b95b1b30.chunk.js","sourcesContent":["/* eslint-disable react/no-multi-comp */\r\nimport React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <MovieGenre genre={genre} key={index} />\r\n          ))}\r\n        </div>\r\n        <LineEllipsis\r\n          className=\"Movie__Synopsis\"\r\n          text={synopsis}\r\n          maxLine=\"3\"\r\n          ellipsis=\"...\"\r\n          trimRight\r\n          basedOn=\"letters\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MoviePoster({ alt, poster }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie__Genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.string.isRequired,\r\n  synopsis: PropTypes.string.isRequired,\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends React.Component {\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render -> componentDidUpdate()\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  // Asynchronous function\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies,\n    });\n  };\n\n  _callApi = () => {\n    return fetch(\n      'https://yts.am/api/v2/list_movies.json?sort_by=download_count',\n    )\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  };\n\n  _renderMovies = () => {\n    const { movies } = this.state;\n    return movies.map(movie => {\n      console.log(movie);\n      return (\n        <Movie\n          title={movie.title}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          synopsis={movie.synopsis}\n        />\n      );\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? 'App' : 'App--loading'}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}